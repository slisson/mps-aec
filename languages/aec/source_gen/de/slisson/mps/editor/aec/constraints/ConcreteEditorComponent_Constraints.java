package de.slisson.mps.editor.aec.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import de.slisson.mps.editor.aec.runtime.AecUtil;

public class ConcreteEditorComponent_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_r8kwn5_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:7cc539c5-29be-40b3-9d55-b7bcd3394317(de.slisson.mps.editor.aec.constraints)", "7037597780566606269");

  public ConcreteEditorComponent_Constraints() {
    super("de.slisson.mps.editor.aec.structure.ConcreteEditorComponent");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("abstractComponent", new BaseReferenceConstraintsDescriptor("abstractComponent", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode c = SLinkOperations.getTarget(_context.getReferenceNode(), "conceptDeclaration", false);
            return AecUtil.findAbstractEditorComponents(c);
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_r8kwn5_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
