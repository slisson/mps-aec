package de.slisson.mps.editor.aec.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_Runtime_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Runtime_NonTypesystemRule() {
  }

  public void applyRule(final SNode aec, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode usingLangModule = SModelOperations.getModuleStub(SNodeOperations.getModel(aec));
    Language usingLang = ModuleRepositoryFacade.getInstance().getModule(INamedConcept_Behavior.call_getFqName_1213877404258(usingLangModule), Language.class);
    if (usingLang != null) {
      IModule moduleToInclude = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("fbdb27d5-4b9e-444b-bace-20b0e5024a93"));
      boolean isIncluded = false;
      for (ModuleReference runtimeModule : CollectionSequence.fromCollection(usingLang.getRuntimeModulesReferences())) {
        if (eq_qywfca_a0a0c0c0a(runtimeModule.getModuleFqName(), moduleToInclude.getModuleFqName())) {
          isIncluded = true;
          break;
        }
      }
      if (!(isIncluded)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(aec, "Runtime Solution " + moduleToInclude.getModuleFqName() + " is not included. Go to Module Properties and add the Solution to the Runtime tab.", "r:b354898a-42c5-432a-8c8c-22bd778cb90d(de.slisson.mps.editor.aec.typesystem)", "8291359990510634060", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("de.slisson.mps.editor.aec.typesystem.fix_Runtime_QuickFix", true);
            intentionProvider.putArgument("language", usingLang);
            intentionProvider.putArgument("moduleToAdd", moduleToInclude.getModuleReference());
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "de.slisson.mps.editor.aec.structure.AbstractEditorComponent";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static boolean eq_qywfca_a0a0c0c0a(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
